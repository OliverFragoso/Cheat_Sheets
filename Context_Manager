STEPS TO BUILD A CONTEXT MANAGER

@contextlib.contextmanager
def my_context():
  #code
  yield -> it means that you are going to return a value, but you expect to finish the rest of the function at some point in the future
  #code
  
1) Define function
2) (Optional) Add any set up code your conext needs
3) Use the "Yield" Keyword
4) (Optional) Add any teardown code your context needs
5) Add the '@contextlib.contextmanager' decorator

#Example of a context manager that returns nothing
    # Add a decorator that will make timer() a context manager
    @contextlib.contextmanager
    def timer():
      """Time the execution of a context block.

      Yields:
        None
      """
      start = time.time()
      # Send control back to the context block
      yield
      end = time.time()
      print('Elapsed: {:.2f}s'.format(end - start))

    with timer():
      print('This should take approximately 0.25 seconds')
      time.sleep(0.25)

#Example of a context manager that reads a file
    @contextlib.contextmanager
    def open_read_only(filename):
      """Open a file in read-only mode.

      Args:
        filename (str): The location of the file to read

      Yields:
        file object
      """
      read_only_file = open(filename, mode='r')
      # Yield read_only_file so it can be assigned to my_file
      yield read_only_file
      # Close read_only_file
      read_only_file.close()

    with open_read_only('my_file.txt') as my_file:
      print(my_file.read())
      
      
NESTED CONTEXT MANAGERS
# Use the "stock('NVDA')" context manager
# and assign the result to the variable "nvda"
with stock('NVDA') as nvda:
  # Open "NVDA.txt" for writing as f_out
  with open('NVDA.txt', 'w') as f_out:
    for _ in range(10):
      value = nvda.price()
      print('Logging ${:.2f} for NVDA'.format(value))
      f_out.write('{:.2f}\n'.format(value))
      
HANDLING ERRORS
def in_dir(directory):
  """Change current working directory to `directory`,
  allow the user to run some code, and change back.

  Args:
    directory (str): The path to a directory to work in.
  """
  current_dir = os.getcwd()
  os.chdir(directory)

  # Add code that lets you handle errors
  try:
    yield
  # Ensure the directory is reset,
  # whether there was an error or not
  finally:
    os.chdir(current_dir)
Now, even if someone writes buggy code when using your context manager, 
you will be sure to change the current working directory back to what it was when they called in_dir(). 
This is important to do because your users might be relying on their working directory being what it was when they started the script.
