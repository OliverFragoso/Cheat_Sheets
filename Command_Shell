~ = /home/repl --> el home directory

COPY:
  cp <direccion o file> <destino>
    example:
      1) cp seasonal/summer.csv backup/summer.bck --> existe summer.csv y se copia en la carpeta
                                                   backup y se nombre summer.bck
      2) cp seasonal/spring.csv seasonal/summer.csv backup --> los csv spring y summer se están
                                                               copiando al mismo tiempo en backup

DELETE:
  rm <file1> <file2> ...
  rm -r puede hacer lo mismo que rmdir
  rmdir <directory> --> sólo borra carpetas que están vacias

LESS: muestra un docuemnto largo hoja por hoja. ":n" lleva al siguiente documento. ":p" lleva al documento previo. ":q"
      nos saca de la visualización
      
      less <documento1> <documento2> ...
      example:
        less seasonal/spring.csv seasonal/summer.csv --> se muestran 2 documentos en ese orden

HEAD: muestra las prineras 10 líneas de un documento
  head <documento>
  head -n <número de lineas> <documento>
    example:
      head -n 3 seasonal/summer.csv
      
TAIL: muestra las últimos líneas de un documento
  tail <documento>
  tail -n +7 <documento> --> muestra de la 6ta linea en adelante
      
ls -R -F: hace una visualización de las carpetas y lo que contienen de manera organizada
  ls -R -F <ruta o caprpeta actual>
  example:
    ls -R -F ~/Documents
    
MAN: muestra la descripción de un comando
  man <comando>
  example:
    man head --> despliega la descripción y sus parámetros
    
CUT: seleccionar líneas de un documento
  cut -f 2-5,8 -d , values.csv --> selecciona las columnas 2 hasta la 5 y la columna 8
                                   -f significa 'fields' que es para especificar columnas
                                   -d especifica el separador de columnas, en este caso es ','

HISTORY: muestra los comando que se han utilizado recientemente
  1) usa history 
  2) !<número> --> el numero que tenga el comando que quieras volver a correr
    exmaple: !4 o !head

GREP: takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text
  grep <palabra> <doumento1> <documento2> ...
  common flags:
    -c: print a count of matching lines rather than the lines themselves
    -h: do not print the names of files when searching multiple files
    -i: ignore case (e.g., treat "Regression" and "regression" as matches)
    -l: print the names of files that contain matches, not the matches
    -n: print line numbers for matching lines
    -v: invert the match, i.e., only show lines that don't match
    
    example:
      grep bicuspid seasonal/winter.csv --> prints lines from winter.csv that contain "bicuspid"
      grep -v -n molar seasonal/winter.csv --> enumera y muestra las líneas que no contengan la palbra molar
 
PASTE: combina documentos en lugar de cortarlos 
  paste -d <delimiter> -s -z <documento1> <documento2>
    -s: pega línea por línea y no paralelo
    -z: es NULL la última línea y no un salto de línea

" > ": guarda el output de un comando usado en el tipo de documento que le indiqes csv o txt
  head -n 5 seasonal/summer.csv > top.csv --> guarda en "top.csv" las primeras 5 líneas del documento summer.csv
  
" | ": enviar el output de un comando como input para otro comando
    example:
      head -n 5 seasonal/summer.csv | tail -n 3 --> primero se obtienen los primeros 5 registros y luego a esos sólo se usan
                                                    los últimos 3
      
      cut -d , -f 2 seasonal/summer.csv | grep -v Tooth | head -n 1 --> se selecciona la 2da columna, se hace busqueda invertida
                                                                        para quitar el título de la columna y se selecciona el 
                                                                        primer dato
                                                                        
WC : prints the number of characters, words, and lines in a file. You can make it print only one of these using -c, -w, or -l respectively
  wc -l <documento>
  
" * " zero or more matches: este wildcard te ayuda a matchear todo los documentos que estén un un repositorio o que cumplan una característica y así
       no se tenga que escribir la misma ruta muchas veces
       cut -d , -f 1 seasonal/*  or cut -d , -f 1 seasonal/*.csv --> ambos comandos toman la primera fila de TODOS los csv que
                                                                     estén presentes en la carpeta 'seasonal'
                                                                     
"?": matches a single character, so 201?.txt will match 2017.txt or 2018.txt, but not 2017-01.txt.
"[...]": matches any one of the characters inside the square brackets, so 201[78].txt matches 2017.txt or 2018.txt, but not 2016.txt.
"{...}": matches any of the comma-separated patterns inside the curly brackets, so {*.txt, *.csv} matches any file whose name ends with .txt or .csv, but not 
         files whose names end with .pdf
         
SORT: sort puts data in order. By default it does this in ascending alphabetical order, but the flags -n and -r can be used to sort numerically and reverse
      the order of its output, while -b tells it to ignore leading blanks and -f tells it to fold case (i.e., be case-insensitive)
      
      example: 
        cut -d , -f 2 seasonal/summer.csv | grep -v Tooth | sort -r --> ordena los nombres de la Z hacia abajo
        
UNIQ: whose job is to remove duplicated lines. More specifically, it removes adjacent duplicated lines. Tienen que estar seguiditos los duplicados
      porque sino no los quita
      
      cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c --> Se selecciona la 2da columna, se hace búsqueda invertida para quitar el título
                                                                             de la columna, se ordena para dejar seguiditos los duplicados y se aplica uniq
                                                                             con -c para que aparezca el conteo de la veces que apareció
     
SHELL VARIABLES
To create a shell variable, you simply assign a value to a name. Without any spaces before or after the = sign. Once you have done this, 
you can check the variable's value with: echo $training
  training=seasonal/summer.csv
  head -n 1 $training
  
FOR LOOPS IN SHELL
  for filetype in gif jpg png; do echo $filetype; done
  
  for filename in seasonal/*.csv; do echo $filename; done --> imprime los nombres de los documentos en la carpeta people
  
  files=seasonal/*.csv
  for f in $files; do echo $f; done --> así es más eficiente que el código de arriba
  
  #How can I do many things in a single loop:
    for f in seasonal/*.csv; do echo $f; head -n 2 $f | tail -n 1; done
    
NANO COMMANDS
  Ctrl + K: delete a line.
  Ctrl + U: un-delete a line.
  Ctrl + O: save the file ('O' stands for 'output'). You will also need to press Enter to confirm the filename!
  Ctrl + X: exit the editor. 
  
  Guardar cambios hechos a un documento:
    Ctrl o, ENTER, Ctrl x
    

HOW CAN I PASS FILENAMES TO SCRIPTS
To support this, you can use the special expression $@ (dollar sign immediately followed by at-sign) to mean "all of the command-line parameters given 
to the script"
$@ --> va dentro del código en donde podría tomas lugar un filename, y a la hora de correr el bash sería así:
  bash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv --> en este caso puede procesar 2 documentos a la vez, summer.csv y autum.csv
    sort $@ | uniq --> porque este es el código que contine unique-lines.sh
    
  As well as $@, the shell lets you use $1, $2, and so on to refer to specific command-line parameters.
    cut -d , -f $2 $1 -->código de column.sh donde $2 es la columna y $1 es el documento
    bash column.sh seasonal/autumn.csv 1 --> enviando autum.csv como documento y 1 como la columna
    

LOOPS IN THE SHELL SCRIPT
  # Print the first and last data records of each file.
    for filename in $@
    do
      head -n 2 $filename | tail -n 1
      tail -n 1 $filename
    done
