Arguments
  2> -->STDERR to be deleted, si hay un error borralo
  1> --> STDOUT, toma como output 
  
  - cat sports.txt 1> new_sports.txt --> el contenido de 'sports.txt' pegalo en 'new_sports.txt'
  - $@/$* --> regresa todos los argumentos que obtiene el bash
  - $# --> regresa el número de argumentos
    EXAMPLE: se tiene el 'args.sh' y su contenido es:
      - #!/usr/bash
          echo $1
          echo $2
          echo $@
          echo "there are " $# "arguments"
      - bash args.sh one two three four five --> correrlo en la terminal
      - el output que obtenemos:
        one
        two
        one two three four five
        there are 5 arguments
        
Basic Variables 
  - Assign variable
    var1="Moon" --> no debe tener espacios
    temp_b="$(cat temps/region_B)" --> obteniendo la información de un documento en otra locación
  - Access variable
    echo $var1
  - '' single quotes: Shell interprets what is been literally
        Example:
        now_var='now'
        now_var_singlequote='$now_var'
        echo $now_var_singlequote --> $now_var
        
  - "" double quotes: Shell interprets literally except using '$' and backticks
        Example:
        now_var='now'
        now_var_doublequote="$now_var"
        echo $now_var_doublequote --> now
        
  - `` backticks: Shell runs the command and captures STDOUT back into the variable
        Example:
        right_now_backticks="The date is `date`" --> date es un comando por sí solo
        right_now_parentesis="The date is $(date)" --> date es un comando por sí solo
        echo $right_now_backticks
        echo $right_now_parentesis--> ambos dan el mismo resultado sólo que el uso de parentesis
                                      es más nuevo y tiene más ventajas
                                      
Numeric Variables
  - expr --> sirve para hacer aritmetica en la terminal. No sirve con decimales
    EXAMPLE:
      expr 1+4 --> 5
  - bc --> basic calculator, escribe 'quit' para salir
    * se pueden hacer operaciones sin tener que ejecutarlo de manera directa
      echo "5+7.5" | bc -->12.5
    
    * 'scale' es un argumento de bc que permite especificar el número de decimales
      echo "scale=3; 10/3" | bc
    
    * num1=87.65
      num2=89.20
      echo "The total score is $(echo "num1 + num2" | bc)"
      echo "The average score is $(echo "(num1 + num2)/2" | bc)"
     
    * var1=$(cat temp/Region_A) --> con esto se obtiene el valor el documento en cierta ubicacion
      echo "The temperature is $var1"
 
ARRAYS
  - Declara un arreglo en Bash
    1) Arreglos vacíos:
      declare -a <name_of_array>
    2) Arreglos con elementos: no debe tener espacio antes ni después del signo '=', y la separación de de elementos se da con los espacios
      <name_of_array>:(1 2 3)
      
  - Funciones de los arreglos
    1) regresar todos los elementos en el arreglo:
      echo ${array[@]}
    2) dimensión del arreglo
      echo ${#array[@]}
    3) regresar un elemento específico
      echo ${array[2]} --> la númeración empieza en cero as usual
    4) cambiar el valor de un arreglo
      array[0]=44
      * NO usar el signo de '$' cuando se sobreescriba un valor --> $array[0]=44
    5) slicing
      echo ${array[@]:N:M}
      * N: es el índice donde empieza
      * M: la cantidad de elementos
    6) agregar elementos
       array+=(elementos)
       
  - Associative arrays (diccionarios): el Key es del tipo string y se asocia con un valor
    * Sólo está disponible para Bash 4, para checar la versión del bash usa bash --version
    
    declare -A city_details #Declare first
    city_details=([city_name]="Ney York " [Population]=1400000) #Agregar elementos
    echo ${array[city_name]} #Acceder
    echo ${!city_details[@]} #Obtener las keys del diccionario
    
IF STATEMENTS
  if [ condition ]; then
    #some code
  else
    #some code
  fi
  
  * Spaces between square brackets and conditional elements inside (first line)
  
  ARITHMETIC IN IF STATEMENTS --> se tiene que usar doble parentesis en lugar de '[]'
    if (($x > 5)); then
      echo "$x is more that 5"
    fi
    
   * Se puede usar [] pero se tienen que usar flags dentro en lugar de '>', '<', '=', '!='
    -eq --> equal to
    -ne --> not equal to
    -lt --> less than
    -le --> less than or equal to
    -gt --> greater than
    -ge --> greater than or equal to
    
      if [ $x -eq 5]; then 
        echo "$x is more than 5"
      fi
   
   *Other flags
    -e if the file exits
    -s if the file exits and has size greater tha zero
    -r if the file exits and is readable
    -w if the file exits and is writable
    
    AND and OR
      * && --> and
      * || --> or
      
      if [ condition ] && [ condition ]; then 
        echo "some code"
      fi
      
      if [[ $x -gt 5 && $x -le 7 ]]; then
        echo "$x is less than 7"
      fi
      
      if $(grep -q Hello words.txt); then
        echo "Hello is inside!"
      fi 
      
  FOR LOOP
    - normal syntax:
        for x in 1 2 3 
        do
          echo $x
        done
    - ranges: {start..stop..increment}
        for x in {1..5..2}
        do
          echo $x
        done
    - three expression syntax: ((x=a;x<=b;x+=c))
        for ((x=2;x<=4;x+=2))
        do
          echo $x
        done
     - Glob expansions: permite usar los wild cards como '*' y acceder a todos los documentos
                        de una carpeta 
        for x in books/*
        do
          echo $x
        done
     - Shell within a shell
        for x in $(ls book/ | grep -i 'air')
        do
          echo $x
        done
     - using if statements inside
        # Create a FOR statement on files in directory
          for file in robs_files/*.py 
          do  
        # Create IF statement using grep
            if grep -q 'RandomForestClassifier' $file ; then
        # Move wanted files to to_keep/ folder
              mv $file to_keep/
            fi
          done
     
WHILE LOOP
  - simple example
      x=1
      while [ $x -le 3 ];
      do
        echo $x
        ((x+=1))
      done
      
CASE STATEMENTS
  - syntax
    case 'something' in
    pattern1)
    command1;;
    pattern2)
    command2;;
    *)
    default command;;
    esac
  - example
    case $(cat $1) in
    *sydney*) -->los '*' son wildcards para indicar que puede estar en cualquier lugar la pabra sydney
    mv $1 sydney/ ;;
    *sydney*|*brisbane*) -->los '*' son wildcards para indicar que puede estar en cualquier lugar la pabra y '|' es un or
    rm $1 ;;
    *)
    echo "No cities found" ;;
    esac
    
